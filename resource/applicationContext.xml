<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <!-- <property name="url">
            <value><![CDATA[jdbc:mysql://127.0.0.1:3306/smbms?
                    useUnicode=true&characterEncoding=utf-8]]></value>
        </property> -->
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/smbms?
                        useUnicode=true&amp;characterEncoding=utf-8" />
        <property name="username" value="root" />
        <property name="password" value="123" />
    </bean>
    <bean id="pageHelper" class="cn.smbms.helper.PageHelper"></bean>
    <!--
     1、导入命名空间 
     2、定义事务管理器
     3、基于事务管理器定义事务管理规则
     4、使用AOP技术实现事务管理增强
     -->
     <!-- 1 、2 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 3 -->
	<tx:advice id="txadvice" transaction-manager="txManager">
		<tx:attributes>
			<!--定义属性，声明事务规则  -->
			<tx:method name="find*" propagation="SUPPORTS"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- 4 -->
	 <aop:config>
    	<aop:pointcut expression="execution(* cn.smbms.*.service.*.*(..))" id="serviceMethod"/>
    	<aop:advisor advice-ref="txadvice" pointcut-ref="serviceMethod"/>
    </aop:config>
    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引用数据源组件 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 引用MyBatis配置文件中的配置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 如果mapper文件与dao接口在同一包下这个mapperLocations可以省略 -->
        
        <!--
        <property name="mapperLocations"> 
       		<array>	
       			 <value>classpath:cn/smbms/*/dao/*mapper.xml</value> 	
       		</array>
       	</property>
         -->
       
    <!-- 配置DAO-->
    </bean>
    <!-- 工具类作用   -->
    <!-- 1、找到接口所对应的xml文件，当做mybatis的核心组件，所以dao接口和xml文件要同名 -->
    <!-- 2、在jvm中，动态创建该接口的实现类 -->
    <!-- 3、实现接口中的方法 -->
    <!-- 4、实现方法做了什么？
    		1）根据配置的sqlsessionFactoryBeanName获取sqlSessionFactory
    		2）通过sqlSessionFactory获取sqlSession
    		3）找到方法所对应的xml文件中的标签
    		4）入参
    		5）执行
    		x）关闭sqlSession
     --> 
     <!--5、动态创建的类会被mapperScannerConfigurer交给springIoC管理 -->
     <!--6、 委托类的时候会指定bean的id-->
    <!-- 配置bean的扫描DAO基准包 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="cn.smbms.*.dao"></property>
    </bean>
    <!-- 通过注解实现服务层注入 -->
    <context:component-scan base-package="cn.smbms.*.service"></context:component-scan>
</beans>